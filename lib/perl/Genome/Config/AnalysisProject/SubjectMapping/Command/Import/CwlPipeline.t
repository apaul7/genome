#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use Test::More tests => 2;
use Test::Deep qw(cmp_bag);
use Genome::Test::Factory::Sample;

use above 'Genome';

my $number_of_mappings = 2;
my $import_class = 'Genome::Config::AnalysisProject::SubjectMapping::Command::Import::CwlPipeline';
use_ok($import_class);

my $test_file = _test_file();
my $analysis_project = Genome::Config::AnalysisProject->__define__(name => 'test proj');

subtest 'import command' => sub{
    my $cmd = $import_class->create(
        analysis_project => $analysis_project,
        file_path => $test_file,
    );

    isa_ok($cmd, $import_class);

    my $res = $cmd->execute();
    ok($res, 'command ran successfully');

    is($res, $number_of_mappings,
        "we expected to create $number_of_mappings subject mappings and did");

    my @mappings = $analysis_project->subject_mappings;
    is(scalar(@mappings), $number_of_mappings,
        'we associated the correct number of pairings with the AnalysisProject');

    for (@mappings) {
        my @inputs = $_->inputs;
        my @tags = $_->tags;

        if (@inputs == 1) {
            is($inputs[0]->key, 'prior_variants', 'set correct input name');
            is(scalar(@tags), 2, 'found tags assigned to mapping');
        } else {
            is(scalar(@inputs), 3, 'assigned all inputs from file');
            is(scalar(@tags), 1, 'found one tag assigned to mapping');
        }
    }
};



sub _test_file {
    my ($fh, $path) = Genome::Sys->create_temp_file();

    for(1..$number_of_mappings) {
        if ($_ % 2 == 0) {
            $fh->say(join("\t",
                'tumor_sample',
                Genome::Test::Factory::Sample->setup_object()->id,
                'normal_sample',
                Genome::Test::Factory::Sample->setup_object()->id,
                'i:prior_variants',
                Genome::Model::Tools::DetectVariants2::Result::Manual->__define__()->id,
                't:' . Genome::Config::Tag->__define__(name => 'test'.$_)->id,
                't:' . Genome::Config::Tag->__define__(name => 'second_test'.$_)->name,
            ));
        } else {
            $fh->say(join("\t",
                'day0_sample',
                Genome::Test::Factory::Sample->setup_object()->name,
                'day30_sample',
                Genome::Test::Factory::Sample->setup_object()->name,
                'i:important_sites',
                Genome::Model::Tools::DetectVariants2::Result::Manual->__define__()->id,
                'i:blacklist_sites',
                Genome::Model::Tools::DetectVariants2::Result::Manual->__define__()->id,
                'i:something_else',
                'just some string',
                't:' . Genome::Config::Tag->__define__(name => 'test'.$_)->name,
            ));
        }
    }

    $fh->close();
    return $path;
}
